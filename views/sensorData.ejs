<div class="container">
  <h1>温度センサー監視システム</h1>
  
  
  
  <!-- Tab Navigation -->
  <div class="tab-container">
    <div class="tab-nav">
      <button class="tab-button" id="sensorTabBtn" onclick="switchTab('sensorTab', this)">
        <span class="tab-icon">📊</span>
        <span>センサー状態</span>
      </button>
      <button class="tab-button" id="serverTabBtn" onclick="switchTab('serverTab', this)">
        <span class="tab-icon">🖥️</span>
        <span>サーバー情報</span>
      </button>
    </div>

    <!-- Sensor Tab Content -->
    <div id="sensorTab" class="tab-content">
      <% if (latestReadings && latestReadings.length > 0) { %>
        <div class="sensor-panels <%= latestReadings.length === 1 ? 'single-sensor' : '' %>">
          <% latestReadings.forEach((sensor, index) => { %>
            <% if (sensor.sensorId && sensor.sensorId.trim() !== '') { %>
              <div class="sensor-data-section <%= latestReadings.length === 1 ? 'full-width' : '' %>" id="sensor-<%= sensor.sensorId %>">
                <div class="sensor-header">
                  <h2 class="sensor-title">
                    <span class="sensor-icon">🌡️</span>
                    <%= sensor.sensorId %> センサー情報
                  </h2>
                  <div class="sensor-status <%= sensor.isActive ? 'active' : 'inactive' %>">
                    <%= sensor.isActive ? '稼働中' : '停止中' %>
                  </div>
                </div>
                
                <!-- Raw Data History -->
                <div class="sensor-data-section">
                 
                  <div class="section-controls">
                    <h3>取得データ履歴 <span class="data-count">(最新100件)</span></h3>
                    <div class="controls-right">
                      <span class="last-updated" id="data-last-updated-<%= sensor.sensorId %>">最終更新: <%= new Date().toLocaleTimeString('ja-JP', {hour: '2-digit', minute: '2-digit', second: '2-digit'}) %></span>
                      <span id="realtime-indicator-<%= sensor.sensorId %>" class="realtime-indicator">
                        <span class="realtime-dot"></span>
                        <span class="realtime-text">リアルタイム</span>
                      </span>
                      <button class="refresh-btn" onclick="refreshData('<%= sensor.sensorId %>')">
                        <span class="refresh-icon">🔄</span>
                      </button>
                    </div>
                  </div>
                  <div class="table-wrapper">
                    <table class="data-table">
                      <thead>
                        <tr>
                          <th>年月日</th>
                          <th>時刻</th>
                          <% for(let i = 1; i <= 16; i++) { %>
                          <th><%= i %></th>
                          <% } %>
                          <th>平均温度</th>
                          <th>状態</th>
                        </tr>
                      </thead>
                      <tbody id="tbody-<%= sensor.sensorId %>">
                        <% sensor.data.forEach(data => { %>
                        <tr class="<%= data.isAbnormal ? 'table-danger' : '' %>">
                          <td><%= data.acquisitionDate %></td>
                          <td><%= data.acquisitionTime %></td>
                          <% data.temperatures.forEach(temp => { %>
                          <td><%= temp !== null ? temp.toFixed(1) : '--' %></td>
                          <% }); %>
                          <td><%= data.averageTemperature !== null ? data.averageTemperature.toFixed(1) : '--' %> °C</td>
                          <td><%= data.isAbnormal ? '異常' : '正常' %></td>
                        </tr>
                        <% }); %>
                      </tbody>
                    </table>
                  </div>
                </div>
                
                <!-- Alert History -->
                <div class="section-header history-section-header">
                  <h3>アラート履歴 <span class="data-count">(最新10件)</span></h3>
                  <div class="controls-right">
                    <span id="alert-realtime-indicator-<%= sensor.sensorId %>" class="realtime-indicator">
                      <span class="realtime-dot"></span>
                      <span class="realtime-text">リアルタイム</span>
                    </span>
                    <button class="expand-btn" onclick="toggleTableExpand('alerts-<%= sensor.sensorId %>-wrapper')">
                      <span class="toggle-icon">⌄</span><span class="toggle-text">展開</span>
                    </button>
                  </div>
                </div>
                <div class="table-wrapper alert-table" id="alerts-<%= sensor.sensorId %>-wrapper">
                  <table class="data-table">
                    <thead>
                      <tr>
                        <th>取得日</th>
                        <th>取得時刻</th>
                        <th>アラート発生理由</th>
                      </tr>
                    </thead>
                    <tbody id="alerts-<%= sensor.sensorId %>">
                      <% (sensor.alerts || []).slice(0, 10).forEach(alert => { %>
                      <tr class="<%= alert.eventType?.includes('RECOVERY') ? 'alert-recovery' : 'alert-row' %>">
                        <td><%= alert.date || '-' %></td>
                        <td><%= alert.time || '-' %></td>
                        <td><%= alert.alert_reason || alert.event || alert.alertReason || '-' %></td>
                      </tr>
                      <% }); %>
                      <% if ((sensor.alerts || []).length === 0) { %>
                        <tr class="empty-table-row">
                          <td colspan="3">アラート履歴はありません</td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
                
                <!-- Settings History -->
                <div class="section-header history-section-header">
                  <h3>設定変更履歴 <span class="data-count">(最新10件)</span></h3>
                  <button class="expand-btn" onclick="toggleTableExpand('settings-<%= sensor.sensorId %>-wrapper')">
                    <span class="toggle-icon">⌄</span><span class="toggle-text">展開</span>
                  </button>
                </div>
                <div class="table-wrapper settings-table" id="settings-<%= sensor.sensorId %>-wrapper">
                  <table class="data-table">
                    <thead>
                      <tr>
                        <th>日付</th>
                        <th>時刻</th>
                        <th>設定内容</th>
                      </tr>
                    </thead>
                    <tbody id="settings-<%= sensor.sensorId %>">
                      <% (sensor.settings || []).forEach(setting => { %>
                      <tr>
                        <td><%= setting.date || '-' %></td>
                        <td><%= setting.time || '-' %></td>
                        <td><%= setting.content || '-' %></td>
                      </tr>
                      <% }); %>
                      <% if ((sensor.settings || []).length === 0) { %>
                        <tr class="empty-table-row">
                          <td colspan="3">設定変更履歴はありません</td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
                
                <!-- Personality History -->
                <div class="section-header history-section-header">
                  <h3>個性（バイアス）履歴 <span class="data-count">(最新10件)</span></h3>
                  <button class="expand-btn" onclick="toggleTableExpand('personality-<%= sensor.sensorId %>-wrapper')">
                    <span class="toggle-icon">⌄</span><span class="toggle-text">展開</span>
                  </button>
                </div>
                <div class="table-wrapper personality-table" id="personality-<%= sensor.sensorId %>-wrapper">
                  <table class="data-table">
                    <thead>
                      <tr>
                        <th>日付</th>
                        <th>時刻</th>
                        <th>バイアス設定</th>
                      </tr>
                    </thead>
                    <tbody id="personality-<%= sensor.sensorId %>">
                      <% (sensor.personality || []).forEach(item => { %>
                      <tr>
                        <td><%= item.date || '-' %></td>
                        <td><%= item.time || '-' %></td>
                        <td><%= item.content || '-' %></td>
                      </tr>
                      <% }); %>
                      <% if ((sensor.personality || []).length === 0) { %>
                        <tr class="empty-table-row">
                          <td colspan="3">バイアス設定履歴はありません</td>
                        </tr>
                      <% } %>
                    </tbody>
                  </table>
                </div>
              </div>
            <% } %>
          <% }); %>
        </div>
      <% } else { %>
        <div class="no-sensors-message">
          <div class="empty-state">
            <span class="empty-icon">📡</span>
            <h3>センサーデータなし</h3>
            <p>接続されたセンサーがないか、データが受信されていません。</p>
          </div>
        </div>
      <% } %>
    </div>

    <!-- Server Tab Content -->
    <div id="serverTab" class="tab-content">
      <h2 class="server-title">サーバー情報</h2>
      
      <div class="server-stats">
        <!-- System Status Card -->
        <div class="stat-card system-status">
          <div class="stat-header">
            <h3 class="stat-title">
              <span class="stat-icon">⚡</span>
              システム状態
            </h3>
            <span class="last-updated" id="status-last-updated">最終更新: <%= serverStats.lastUpdateTime ? new Date(serverStats.lastUpdateTime).toLocaleString('ja-JP') : '-' %></span>
          </div>
          <div class="stat-content" id="system-status">
            <table class="data-table status-table">
              <tr>
                <th>MongoDB接続状態</th>
                <td id="mongodb-status">接続中</td>
              </tr>
              <tr>
                <th>センサー数</th>
                <td id="sensor-count"><%= serverStats.totalSensors %></td>
              </tr>
              <tr>
                <th>アクティブセンサー</th>
                <td id="active-sensors"><%= serverStats.activeSensors %></td>
              </tr>
              <tr>
                <th>最終データ受信</th>
                <td id="last-data-received"><%= serverStats.lastUpdateTime ? new Date(serverStats.lastUpdateTime).toLocaleString('ja-JP', {
                  year: 'numeric',
                  month: '2-digit',
                  day: '2-digit',
                  hour: '2-digit',
                  minute: '2-digit',
                  second: '2-digit'
                }) : '-' %></td>
              </tr>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Data handling functions for real-time updates
  function handleFullSensorData(data) {
    if (!data || !data.sensorId || !Array.isArray(data.readings)) return;
    
    const tbody = document.getElementById(`tbody-${data.sensorId}`);
    if (!tbody) return;
    
    // Clear existing rows
    tbody.innerHTML = '';
    
    // Add new rows
    data.readings.forEach(reading => {
      const tr = document.createElement('tr');
      if (reading.isAbnormal) tr.classList.add('table-danger');
      
      // Format date and time
      const timestamp = new Date(reading.timestamp);
      const dateStr = timestamp.toLocaleDateString('ja-JP');
      const timeStr = timestamp.toLocaleTimeString('ja-JP');
      
      // Create date cell
      const dateCell = document.createElement('td');
      dateCell.textContent = dateStr;
      tr.appendChild(dateCell);
      
      // Create time cell
      const timeCell = document.createElement('td');
      timeCell.textContent = timeStr;
      tr.appendChild(timeCell);
      
      // Create temperature cells
      const temperatures = reading.temperatures || [];
      for (let i = 0; i < 16; i++) {
        const td = document.createElement('td');
        td.textContent = temperatures[i] !== undefined && temperatures[i] !== null 
          ? temperatures[i].toFixed(1) 
          : '--';
        tr.appendChild(td);
      }
      
      // Create average temperature cell
      const avgTempCell = document.createElement('td');
      avgTempCell.textContent = reading.averageTemperature !== undefined && reading.averageTemperature !== null 
        ? `${reading.averageTemperature.toFixed(1)} °C` 
        : '--';
      tr.appendChild(avgTempCell);
      
      // Create status cell
      const statusCell = document.createElement('td');
      statusCell.textContent = reading.isAbnormal ? '異常' : '正常';
      tr.appendChild(statusCell);
      
      tbody.appendChild(tr);
    });
    
    // Update last refresh time for this sensor
    updateSensorLastUpdated(data.sensorId);
  }
  
  function handleFullAlertsData(alerts) {
    if (!Array.isArray(alerts)) return;
    
    // Group alerts by sensor ID
    const alertsBySensor = {};
    alerts.forEach(alert => {
      if (!alert.sensorId) return;
      
      if (!alertsBySensor[alert.sensorId]) {
        alertsBySensor[alert.sensorId] = [];
      }
      alertsBySensor[alert.sensorId].push(alert);
    });
    
    // Update each sensor's alerts table
    for (const sensorId in alertsBySensor) {
      const alertsTable = document.getElementById(`alerts-${sensorId}`);
      if (!alertsTable) continue;
      
      // Clear existing rows
      alertsTable.innerHTML = '';
      
      // Add new rows
      alertsBySensor[sensorId].forEach(alert => {
        const tr = document.createElement('tr');
        tr.className = alert.eventType?.includes('RECOVERY') ? 'alert-recovery' : 'alert-row';
        
        // Format date and time if needed
        let date = alert.date || '';
        let time = alert.time || '';
        
        if (!date || !time) {
          const timestamp = new Date(alert.timestamp || Date.now());
          date = date || timestamp.toLocaleDateString('ja-JP');
          time = time || timestamp.toLocaleTimeString('ja-JP');
        }
        
        // Create date cell
        const dateCell = document.createElement('td');
        dateCell.textContent = date;
        tr.appendChild(dateCell);
        
        // Create time cell
        const timeCell = document.createElement('td');
        timeCell.textContent = time;
        tr.appendChild(timeCell);
        
        // Create event cell
        const eventCell = document.createElement('td');
        eventCell.textContent = alert.alert_reason || alert.event || alert.alertReason || '-';
        tr.appendChild(eventCell);
        
        alertsTable.appendChild(tr);
      });
      
      // Add "no alerts" message if empty
      if (alertsBySensor[sensorId].length === 0) {
        const tr = document.createElement('tr');
        tr.className = 'empty-table-row';
        
        const td = document.createElement('td');
        td.colSpan = 3;
        td.textContent = 'アラート履歴はありません';
        
        tr.appendChild(td);
        alertsTable.appendChild(tr);
      }
    }
  }
  
  function handleFullSettingsData(settings) {
    if (!Array.isArray(settings)) return;
    
    // Group settings by sensor ID
    const settingsBySensor = {};
    settings.forEach(setting => {
      if (!setting.sensorId) return;
      
      if (!settingsBySensor[setting.sensorId]) {
        settingsBySensor[setting.sensorId] = [];
      }
      settingsBySensor[setting.sensorId].push(setting);
    });
    
    // Update each sensor's settings table
    for (const sensorId in settingsBySensor) {
      const settingsTable = document.getElementById(`settings-${sensorId}`);
      if (!settingsTable) continue;
      
      // Clear existing rows
      settingsTable.innerHTML = '';
      
      // Add new rows
      settingsBySensor[sensorId].forEach(setting => {
        const tr = document.createElement('tr');
        
        // Format date and time if needed
        let date = setting.date || '';
        let time = setting.time || '';
        
        if (!date || !time) {
          const timestamp = new Date(setting.timestamp || Date.now());
          date = date || timestamp.toLocaleDateString('ja-JP');
          time = time || timestamp.toLocaleTimeString('ja-JP');
        }
        
        // Create date cell
        const dateCell = document.createElement('td');
        dateCell.textContent = date;
        tr.appendChild(dateCell);
        
        // Create time cell
        const timeCell = document.createElement('td');
        timeCell.textContent = time;
        tr.appendChild(timeCell);
        
        // Create content cell
        const contentCell = document.createElement('td');
        contentCell.textContent = setting.content || `${setting.changeType}: ${JSON.stringify(setting.value)}`;
        tr.appendChild(contentCell);
        
        settingsTable.appendChild(tr);
      });
      
      // Add "no settings" message if empty
      if (settingsBySensor[sensorId].length === 0) {
        const tr = document.createElement('tr');
        tr.className = 'empty-table-row';
        
        const td = document.createElement('td');
        td.colSpan = 3;
        td.textContent = '設定変更履歴はありません';
        
        tr.appendChild(td);
        settingsTable.appendChild(tr);
      }
    }
  }
  
  function handleFullPersonalityData(personalityData) {
    if (!Array.isArray(personalityData)) return;
    
    // Group personality data by sensor ID
    const personalityBySensor = {};
    personalityData.forEach(item => {
      if (!item.sensorId) return;
      
      if (!personalityBySensor[item.sensorId]) {
        personalityBySensor[item.sensorId] = [];
      }
      personalityBySensor[item.sensorId].push(item);
    });
    
    // Update each sensor's personality table
    for (const sensorId in personalityBySensor) {
      const personalityTable = document.getElementById(`personality-${sensorId}`);
      if (!personalityTable) continue;
      
      // Clear existing rows
      personalityTable.innerHTML = '';
      
      // Add new rows
      personalityBySensor[sensorId].forEach(item => {
        const tr = document.createElement('tr');
        
        // Format date and time if needed
        let date = item.date || '';
        let time = item.time || '';
        
        if (!date || !time) {
          const timestamp = new Date(item.timestamp || Date.now());
          date = date || timestamp.toLocaleDateString('ja-JP');
          time = time || timestamp.toLocaleTimeString('ja-JP');
        }
        
        // Create date cell
        const dateCell = document.createElement('td');
        dateCell.textContent = date;
        tr.appendChild(dateCell);
        
        // Create time cell
        const timeCell = document.createElement('td');
        timeCell.textContent = time;
        tr.appendChild(timeCell);
        
        // Create content cell
        const contentCell = document.createElement('td');
        contentCell.textContent = item.content || `${item.biasType}: ${item.biasValue && item.biasValue.level ? item.biasValue.level : JSON.stringify(item.biasValue)}`;
        tr.appendChild(contentCell);
        
        personalityTable.appendChild(tr);
      });
      
      // Add "no personality data" message if empty
      if (personalityBySensor[sensorId].length === 0) {
        const tr = document.createElement('tr');
        tr.className = 'empty-table-row';
        
        const td = document.createElement('td');
        td.colSpan = 3;
        td.textContent = 'バイアス設定履歴はありません';
        
        tr.appendChild(td);
        personalityTable.appendChild(tr);
      }
    }
  }
  
  // Update last updated timestamp for a specific sensor
  function updateSensorLastUpdated(sensorId) {
    const now = new Date();
    const formattedTime = now.toLocaleTimeString('ja-JP', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    const lastUpdatedElement = document.getElementById(`data-last-updated-${sensorId}`);
    if (lastUpdatedElement) {
      lastUpdatedElement.textContent = `最終更新: ${formattedTime}`;
    }
  }
  
  // Handle refresh button click
  function refreshData(sensorId) {
    console.log(`Refreshing data for sensor: ${sensorId}`);
    
    // Add spinning class to the refresh button
    const refreshBtn = document.querySelector(`#sensor-${sensorId} .refresh-btn`);
    if (refreshBtn) {
      refreshBtn.classList.add('spinning');
      
      // Remove spinning class after 1 second
      setTimeout(() => {
        refreshBtn.classList.remove('spinning');
      }, 1000);
    }
    
    // Request full data through socket
    const socket = io(); // Get the socket instance
    socket.emit('requestFullData');
  }
  
  // Toggle expand/collapse of tables
  function toggleTableExpand(wrapperId) {
    const wrapper = document.getElementById(wrapperId);
    if (wrapper) {
      wrapper.classList.toggle('expanded');
      
      // Update toggle button text
      const toggleBtn = wrapper.previousElementSibling.querySelector('.expand-btn');
      const toggleText = toggleBtn.querySelector('.toggle-text');
      
      if (wrapper.classList.contains('expanded')) {
        toggleText.textContent = '折りたたむ';
      } else {
        toggleText.textContent = '展開';
      }
    }
  }
  
  // Initialize tabs
  function switchTab(tabId, button) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
      tab.classList.remove('active');
    });
    
    // Deactivate all buttons
    document.querySelectorAll('.tab-button').forEach(btn => {
      btn.classList.remove('active');
    });
    
    // Show selected tab
    document.getElementById(tabId).classList.add('active');
    
    // Activate selected button
    button.classList.add('active');
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize tabs - make the first tab active by default
    const defaultTabId = 'sensorTab';
    const defaultTabBtn = document.getElementById('sensorTabBtn');
    
    if (defaultTabBtn && document.getElementById(defaultTabId)) {
      document.getElementById(defaultTabId).classList.add('active');
      defaultTabBtn.classList.add('active');
    }
    
    // Set up Socket.IO and auto-refresh
    setupSocketIO();
  });
  
  // Setup Socket.IO functionality
  function setupSocketIO() {
    const socket = io();
    
    // Connection status indicators
    socket.on('connect', () => {
      console.log('Connected to server');
      const connectionStatus = document.getElementById('connection-status');
      if (connectionStatus) {
        connectionStatus.textContent = '接続済み';
        connectionStatus.className = 'connection-status connected';
      }
    });
    
    socket.on('disconnect', () => {
      console.log('Disconnected from server');
      const connectionStatus = document.getElementById('connection-status');
      if (connectionStatus) {
        connectionStatus.textContent = '切断';
        connectionStatus.className = 'connection-status disconnected';
      }
    });
    
    // Data event handlers
    socket.on('fullSensorData', (data) => {
      console.log('Received full sensor data:', data.sensorId);
      handleFullSensorData(data);
      pulseRealTimeIndicator(data.sensorId);
    });
    
    socket.on('sensorDataUpdate', (data) => {
      console.log('Received sensor data update:', data.sensorId);
      handleFullSensorData(data);
      pulseRealTimeIndicator(data.sensorId);
    });
    
    socket.on('fullAlertsData', (data) => {
      console.log('Received full alerts data');
      handleFullAlertsData(data);
    });
    
    socket.on('alertsUpdate', (data) => {
      console.log('Received alerts update');
      handleFullAlertsData(data);
      
      // Group alerts by sensor
      const alertsBySensor = {};
      data.forEach(alert => {
        if (!alert.sensorId) return;
        if (!alertsBySensor[alert.sensorId]) {
          alertsBySensor[alert.sensorId] = [];
        }
        alertsBySensor[alert.sensorId].push(alert);
      });
      
      // Pulse indicators for each affected sensor
      for (const sensorId in alertsBySensor) {
        pulseRealTimeIndicator(sensorId, 'alert');
      }
    });
    
    socket.on('fullSettingsData', (data) => {
      console.log('Received full settings data');
      handleFullSettingsData(data);
    });
    
    socket.on('settingsUpdate', (data) => {
      console.log('Received settings update');
      handleFullSettingsData(data);
    });
    
    socket.on('fullPersonalityData', (data) => {
      console.log('Received full personality data');
      handleFullPersonalityData(data);
    });
    
    socket.on('personalityUpdate', (data) => {
      console.log('Received personality update');
      handleFullPersonalityData(data);
    });
    
    socket.on('dataHeartbeat', (data) => {
      console.log('Received heartbeat:', data.timestamp);
      // Update all 'last updated' indicators
      document.querySelectorAll('.last-updated').forEach(el => {
        const now = new Date();
        const formattedTime = now.toLocaleTimeString('ja-JP', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });
        
        if (!el.id.includes('data-last-updated')) {
          el.textContent = `最終更新: ${formattedTime}`;
        }
      });
    });
    
    // Setup automatic refresh every 60 seconds
    setInterval(() => {
      if (socket.connected) {
        console.log('Auto-refreshing data...');
        socket.emit('requestFullData');
      }
    }, 60000);
    
    // Initial data request on connection
    socket.on('connect', () => {
      console.log('Requesting initial data...');
      socket.emit('requestFullData');
    });
  }
  
  // Function to pulse the real-time indicator
  function pulseRealTimeIndicator(sensorId, type = '') {
    const indicatorId = type ? `${type}-realtime-indicator-${sensorId}` : `realtime-indicator-${sensorId}`;
    const indicator = document.getElementById(indicatorId);
    
    if (indicator) {
      // Add a stronger pulse effect by adding this class
      indicator.querySelector('.realtime-dot').classList.add('active-pulse');
      
      // Remove it after animation completes
      setTimeout(() => {
        indicator.querySelector('.realtime-dot').classList.remove('active-pulse');
      }, 1000);
    }
  }
</script>

